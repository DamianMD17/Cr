/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import Clases.Estudiante;
import Mantenimiento.MantenimientoEstudiante;

/**
 *
 * @author mjmar
 */
public class tblEstudiantes extends javax.swing.JFrame {

    private DefaultTableModel tableModel;
    private static final String ARCHIVO_ESTUDIANTE= "estudiantes.txt";
    public tblEstudiantes() {
        initComponents();
        MantenimientoEstudiante mante = new MantenimientoEstudiante();
        mante.defaultStudent();
        ArrayList<Estudiante> listaEst = mante.getstudentList();
        
        tableModel = new DefaultTableModel();
        
        
         tableModel.addColumn("Cedula");
         tableModel.addColumn("Nombre");
         tableModel.addColumn("Carrera");
         
         cargarArchivo(ARCHIVO_ESTUDIANTE);
         
         for (Estudiante listaestudiante : listaEst) {
            tableModel.addRow(new Object[]{
                listaestudiante.getId(),
                listaestudiante.getNombre(),
                listaestudiante.getCarrera()});
        }
         
         tblEstudiante.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tblEstudiante.getSelectedRow();
                    if (selectedRow >= 0) {
                        Vector rowData = (Vector) tableModel.getDataVector().elementAt(selectedRow);
                        txtCedula.setText((String) rowData.get(0));
                        txtNombre.setText((String) rowData.get(1));
                        txtCarrera.setText((String) rowData.get(2));

                    }
                }
            }
        });
        
         tblEstudiante.setModel(tableModel);
        
        
        
    }
    
    private void cargarArchivo(String file) {
    try (BufferedReader br = new BufferedReader(new FileReader(file))) {
        String line;
        while ((line = br.readLine()) != null) {
            String[] dato = line.split(","); 
            if (dato.length == 3) {
             tableModel.addRow(new Object[]{dato[0], dato[1], dato[2]});
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}

    
    private void guardarTxt() {
    try (BufferedWriter bw = new BufferedWriter(new FileWriter(ARCHIVO_ESTUDIANTE, true))) {
       
        String cedula = txtCedula.getText();
        String nombre = txtNombre.getText();
        String carrera = txtCarrera.getText();

        if (!cedula.isEmpty() && !nombre.isEmpty() && !carrera.isEmpty()) {
            
            String linea =(cedula + "," + nombre + "," + carrera);
            bw.write(linea);
            bw.newLine();
            JOptionPane.showMessageDialog(this, "estudiante matriculado con exito");
            
        }
          
        
    } catch (IOException ex) {
        ex.printStackTrace();
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEstudiante = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        txtCedula = new javax.swing.JTextField();
        txtCarrera = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 153, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblEstudiante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblEstudiante);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 246, 520, 91));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Filtrar");
        jLabel4.setOpaque(true);
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 203, 226, 25));

        btnAgregar.setText("Agregar");
        btnAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarMouseClicked(evt);
            }
        });
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel1.add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 87, 73, 30));

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel1.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(308, 87, 73, 30));

        txtNombre.setText("Nombre Completo");
        jPanel1.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 177, -1));

        txtCedula.setText("Cedula");
        txtCedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCedulaActionPerformed(evt);
            }
        });
        jPanel1.add(txtCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 40, 215, -1));

        txtCarrera.setText("Carrera");
        jPanel1.add(txtCarrera, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 92, 177, -1));

        jButton1.setText("Menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 390, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        
        if(validaciones()){
        guardarTxt();   
         addRow();
        }
       
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void txtCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCedulaActionPerformed

    private void btnAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

            String eliminar = txtCedula.getText();
            eliminarLinea(eliminar);
            int fila =tblEstudiante.getSelectedRow();
       
            if (fila>=0) {
            tableModel.removeRow(fila);
        }else{
               JOptionPane.showMessageDialog(null, "Seleccionar Fila"); 
            }
 
        

        // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Menu men = new Menu();
       men.setVisible(true);
       dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tblEstudiantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tblEstudiantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tblEstudiantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tblEstudiantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tblEstudiantes().setVisible(true);
            }
        });
    }
    public void addRow() {
        String id = txtCedula.getText();
        String name = txtNombre.getText();
        String carrera = txtCarrera.getText();
       

        //Validar campos se encuentren llenos
       

        Estudiante student = new Estudiante(id, name, carrera);
        MantenimientoEstudiante man = new MantenimientoEstudiante();
        man.createStudent(id, name, carrera);

        // Crear las filas
        tableModel.addRow(new Object[]{
            student.getId(),
            student.getNombre(),
            student.getCarrera()});

        //Limpiar txt
        txtCedula.setText("");
        txtNombre.setText("");
        txtCarrera.setText("");
      
        //Asignar modelo a la tabla que creamos en el FRM
        tblEstudiante.setModel(tableModel);

    }
    
   private static void eliminarLinea(String cedulaAEliminar) {
       ArrayList<String> lineas = new ArrayList<String>();

        try (BufferedReader br = new BufferedReader(new FileReader(ARCHIVO_ESTUDIANTE))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                // Dividir la línea en partes usando la coma como delimitador
                String[] partes = linea.split(",");

                // Verificar si la línea contiene la cédula que se desea eliminar
                if (partes.length > 0 && partes[0].equals(cedulaAEliminar)) {
                    // Si contiene la cédula, no agregar la línea a la lista
                    //continue;
                }

                // Agregar la línea a la lista
                lineas.add(linea);
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(ARCHIVO_ESTUDIANTE))) {
            // Escribir todas las líneas en el archivo original
            for (String linea : lineas) {
                bw.write(linea);
                bw.newLine();
            }

           JOptionPane.showMessageDialog(null, "estudiante eliminado");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
 public Boolean datosRepetidos (){
        String id = txtCedula.getText();
        String name = txtNombre.getText();
        String carrera = txtCarrera.getText();
        
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String cedula = (String) tableModel.getValueAt(i, 0);

            if (id.equals(cedula)) {
                
                 return true;
            }
        }
        return false;
    }
    public Boolean validaciones(){
        String id = txtCedula.getText();
        String name = txtNombre.getText();
        String carrera = txtCarrera.getText();
        int digitos = id.length();
        if(digitos!=9){
            JOptionPane.showMessageDialog(null, "El id debe contener 9 digitos");
             return false;
        }
         if (id.isEmpty() || name.isEmpty() || carrera.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos deben estar llenos");
             return false;
        }
         for (int i = 0; i < tableModel.getRowCount(); i++) {
            String cedula = (String) tableModel.getValueAt(i, 0);

            if (id.equals(cedula)) {
                JOptionPane.showMessageDialog(this, "No se permiten elementos repetidos");
                return false;
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblEstudiante;
    private javax.swing.JTextField txtCarrera;
    private javax.swing.JTextField txtCedula;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
